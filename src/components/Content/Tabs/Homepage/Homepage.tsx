import React from "react";

export default function HomePage() {
  return (
    <div>
      <h1>Пояснительная записка</h1>
      <p>
        Работы выполнены на связке языка программирования TypeScript с
        фреймворком React. Для инициализации, запуска и сборки проекта
        использовалась библиотека react scripts.
      </p>
      <p>
        Так как была предоставлена свобода выбора 6 работ из всех доступных -
        были выбраны следующие работы:
      </p>
      <ul>
        <li>
          Лабораторная работа № 1. Программирование циклических вычислительных
          процессов
        </li>
        <li>
          Лабораторная работа № 5. Определение характеристик одномерных массивов
        </li>
        <li>Лабораторная работа № 3. Числовые и функциональные ряды</li>
        <li>Лабораторная работа № 6. Модификация одномерных массивов</li>
        <li>Лабораторная работа № 7. Обработка текстовых строк</li>
        <li>Лабораторная работа № 8. Модификация двумерных массивов</li>
      </ul>
      <p>
        Код для каждой задачи сгруппирован в папки: First-task, Second-task,
        Third-task, Fourth-task, Fifth-task, Sixth-task, в соответствии с
        положением кнопок в меню-навигации. Эти папки находятся в директории
        src\components\Content\Tabs\Tasks. В каждой папке по задаче есть 4
        файла:
      </p>
      <ol>
        <li>
          index.ts - файл с реэкспортом кода React-компонента для упрощения
          конструкций импорта
        </li>
        <li>
          [<i>номер_вкладки_с_задачей</i>].tsx - основной файл с
          React-компонентом. Содержит локальное состояние, обработку событий,
          HTML-разметку и т.д.
        </li>
        <li>
          <b>
            [<i>номер_вкладки_с_задачей</i>].logic.ts - основной файл с
            требуемыми по задаче логическими функциями
          </b>
        </li>
        <li>
          [<i>номер_вкладки_с_задачей</i>].module.css - файл со стилистическими
          классами CSS
        </li>
      </ol>
      <h3>Пояснения к программному коду</h3>
      <p>
        TypeScript - поддерживает как строготипизированный режим, так и более
        мягкий, путём присваивания переменной типа any, или, в некоторых
        случаях, без присваивания типа вообще (тогда тип any присвоится
        автоматически). В своей работе я старался всё строго типизировать.
        TypeScript позволяет не прописывать типы вручную каждой константе или
        переменной: он может самостоятельно определить тип переменной, если ей
        сразу же присваивается какое-то значение. Условно, если я напишу:
        <br />
        <code>const a = [1, 2, 3]</code>
        <br /> - мне не обязательно указывать тип массива, так как компилятор
        сам поймёт и запомнит, что в этой константе может храниться только
        числовой массив любой длины.
      </p>
      <p>
        {`При типизации массивов, записи - Array<number> и number[] - равнозначны.`}
      </p>
    </div>
  );
}
